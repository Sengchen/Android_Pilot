/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package xhf.project.chartcorejni;

public class CHfVCFGeoCanvas {
	private long swigCPtr;
	protected boolean swigCMemOwn;

	protected CHfVCFGeoCanvas(long cPtr, boolean cMemoryOwn) {
		swigCMemOwn = cMemoryOwn;
		swigCPtr = cPtr;
	}

	protected static long getCPtr(CHfVCFGeoCanvas obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	protected void finalize() {
		delete();
	}

	public synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				elecchartcoreJNI.delete_CHfVCFGeoCanvas(swigCPtr);
			}
			swigCPtr = 0;
		}
	}

	protected void swigDirectorDisconnect() {
		swigCMemOwn = false;
		delete();
	}

	public void swigReleaseOwnership() {
		swigCMemOwn = false;
		elecchartcoreJNI
				.CHfVCFGeoCanvas_change_ownership(this, swigCPtr, false);
	}

	public void swigTakeOwnership() {
		swigCMemOwn = true;
		elecchartcoreJNI.CHfVCFGeoCanvas_change_ownership(this, swigCPtr, true);
	}

	public CHfVCFGeoCanvas() {
		this(elecchartcoreJNI.new_CHfVCFGeoCanvas(), true);
		elecchartcoreJNI.CHfVCFGeoCanvas_director_connect(this, swigCPtr,
				swigCMemOwn, true);
	}

	public void CreateDrawBuffer() {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_CreateDrawBuffer(swigCPtr, this);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_CreateDrawBufferSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this);
	}

	public void DestoryDrawBuffer() {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DestoryDrawBuffer(swigCPtr, this);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DestoryDrawBufferSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this);
	}

	public void MoveCanvas(int nOffsetX, int nOffsetY) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_MoveCanvas(swigCPtr, this,
					nOffsetX, nOffsetY);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_MoveCanvasSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, nOffsetX, nOffsetY);
	}

	public void ShowCanvas() {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_ShowCanvas(swigCPtr, this);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_ShowCanvasSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this);
	}

	public void oldCanvasFlush() {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_oldCanvasFlush(swigCPtr, this);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_oldCanvasFlushSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this);
	}

	public void newCanvasFlush() {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_newCanvasFlush(swigCPtr, this);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_newCanvasFlushSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this);
	}

	public void scrCanvasFlush() {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_scrCanvasFlush(swigCPtr, this);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_scrCanvasFlushSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this);
	}

	public void DrawCanvasBackground(int nColor) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawCanvasBackground(swigCPtr,
					this, nColor);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawCanvasBackgroundSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, nColor);
	}

	public void DrawGeoDataSetBackground(int x1, int y1, int x2, int y2,
			int x3, int y3, int x4, int y4, int bkColor) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawGeoDataSetBackground(swigCPtr,
					this, x1, y1, x2, y2, x3, y3, x4, y4, bkColor);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawGeoDataSetBackgroundSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x1, y1, x2, y2, x3, y3, x4, y4,
							bkColor);
	}

	public void DrawVCFPoint_TrueTypeSymbol(float x, float y,
			emVCF_SYMBOL_FONT emFont, int nSymNa, float nWidth, float nHeight,
			int symColor, double fRotAngle, float fdtx, float fdty) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFPoint_TrueTypeSymbol__SWIG_0(
							swigCPtr, this, x, y, emFont.swigValue(), nSymNa,
							nWidth, nHeight, symColor, fRotAngle, fdtx, fdty);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFPoint_TrueTypeSymbolSwigExplicitCHfVCFGeoCanvas__SWIG_0(
							swigCPtr, this, x, y, emFont.swigValue(), nSymNa,
							nWidth, nHeight, symColor, fRotAngle, fdtx, fdty);
	}

	public void DrawVCFPoint_TrueTypeSymbol(float x, float y,
			emVCF_SYMBOL_FONT emFont, int nSymNa, float nWidth, float nHeight,
			int symColor, double fRotAngle, float fdtx) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFPoint_TrueTypeSymbol__SWIG_1(
							swigCPtr, this, x, y, emFont.swigValue(), nSymNa,
							nWidth, nHeight, symColor, fRotAngle, fdtx);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFPoint_TrueTypeSymbolSwigExplicitCHfVCFGeoCanvas__SWIG_1(
							swigCPtr, this, x, y, emFont.swigValue(), nSymNa,
							nWidth, nHeight, symColor, fRotAngle, fdtx);
	}

	public void DrawVCFPoint_TrueTypeSymbol(float x, float y,
			emVCF_SYMBOL_FONT emFont, int nSymNa, float nWidth, float nHeight,
			int symColor, double fRotAngle) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFPoint_TrueTypeSymbol__SWIG_2(
							swigCPtr, this, x, y, emFont.swigValue(), nSymNa,
							nWidth, nHeight, symColor, fRotAngle);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFPoint_TrueTypeSymbolSwigExplicitCHfVCFGeoCanvas__SWIG_2(
							swigCPtr, this, x, y, emFont.swigValue(), nSymNa,
							nWidth, nHeight, symColor, fRotAngle);
	}

	public void DrawVCFPoint_EllipseSymbol(int x, int y, int nFillColor,
			int nPenColor) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFPoint_EllipseSymbol(
					swigCPtr, this, x, y, nFillColor, nPenColor);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFPoint_EllipseSymbolSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x, y, nFillColor, nPenColor);
	}

	public void DrawVCFPoint_SoundValue(int x, int y, double fValue,
			int nTideColor) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFPoint_SoundValue(swigCPtr,
					this, x, y, fValue, nTideColor);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFPoint_SoundValueSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x, y, fValue, nTideColor);
	}

	public void DrawVCFPoint_AnncovpText(int x, int y, String szText,
			int nsize, int nTextColor) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFPoint_AnncovpText(swigCPtr,
					this, x, y, szText, nsize, nTextColor);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFPoint_AnncovpTextSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x, y, szText, nsize, nTextColor);
	}

	public void SetVCFLine_BeginPanit(float nLinwWidth, int nLineStyle,
			int nLineColor) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_SetVCFLine_BeginPanit(swigCPtr,
					this, nLinwWidth, nLineStyle, nLineColor);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_SetVCFLine_BeginPanitSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, nLinwWidth, nLineStyle, nLineColor);
	}

	public void DrawVCFLine_MoveTo(float x, float y) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_MoveTo(swigCPtr, this,
					x, y);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_MoveToSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x, y);
	}

	public void DrawVCFLine_LineTo(float x, float y) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_LineTo(swigCPtr, this,
					x, y);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_LineToSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x, y);
	}

	public void SetVCFLine_EndPanit() {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI
					.CHfVCFGeoCanvas_SetVCFLine_EndPanit(swigCPtr, this);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_SetVCFLine_EndPanitSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this);
	}

	public void DrawVCFLine_PolyPolyline(Ints linePtsX, Ints linePtsY,
			Ints nEdgeLens, float nLinwWidth, int nLineStyle, int nLineColor) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_PolyPolyline(swigCPtr,
					this, Ints.getCPtr(linePtsX), linePtsX,
					Ints.getCPtr(linePtsY), linePtsY, Ints.getCPtr(nEdgeLens),
					nEdgeLens, nLinwWidth, nLineStyle, nLineColor);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_PolyPolylineSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, Ints.getCPtr(linePtsX), linePtsX,
							Ints.getCPtr(linePtsY), linePtsY,
							Ints.getCPtr(nEdgeLens), nEdgeLens, nLinwWidth,
							nLineStyle, nLineColor);
	}

	public void DrawVCFLine_Polyline(Ints linePtsX, Ints linePtsY,
			float nLinwWidth, int nLineStyle, int nLineColor) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_Polyline(swigCPtr,
					this, Ints.getCPtr(linePtsX), linePtsX,
					Ints.getCPtr(linePtsY), linePtsY, nLinwWidth, nLineStyle,
					nLineColor);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_PolylineSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, Ints.getCPtr(linePtsX), linePtsX,
							Ints.getCPtr(linePtsY), linePtsY, nLinwWidth,
							nLineStyle, nLineColor);
	}

	public void DrawVCFLine_DashPolyline(Ints linePtsX, Ints linePtsY,
			int nStartPos, int nLineLen, int nLineStyle, int nLineColor,
			double offset, double snap, float nWidth, int nMask, Ints slMask) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_DashPolyline(swigCPtr,
					this, Ints.getCPtr(linePtsX), linePtsX,
					Ints.getCPtr(linePtsY), linePtsY, nStartPos, nLineLen,
					nLineStyle, nLineColor, offset, snap, nWidth, nMask,
					Ints.getCPtr(slMask), slMask);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_DashPolylineSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, Ints.getCPtr(linePtsX), linePtsX,
							Ints.getCPtr(linePtsY), linePtsY, nStartPos,
							nLineLen, nLineStyle, nLineColor, offset, snap,
							nWidth, nMask, Ints.getCPtr(slMask), slMask);
	}

	public void DrawVCFLine_DashLine(int x1, int y1, int x2, int y2,
			int nLineStyle, int nLineColor, float nWidth) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_DashLine(swigCPtr,
					this, x1, y1, x2, y2, nLineStyle, nLineColor, nWidth);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_DashLineSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x1, y1, x2, y2, nLineStyle,
							nLineColor, nWidth);
	}

	public void DrawVCFLine_DotPolyline(Ints linePtsX, Ints linePtsY,
			int nStartPos, int nLineLen, int nLineColor, double offset,
			double snap, double fWidth, double fHeight, double radian,
			int nMaskLen, Ints slMask) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_DotPolyline(swigCPtr,
					this, Ints.getCPtr(linePtsX), linePtsX,
					Ints.getCPtr(linePtsY), linePtsY, nStartPos, nLineLen,
					nLineColor, offset, snap, fWidth, fHeight, radian,
					nMaskLen, Ints.getCPtr(slMask), slMask);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_DotPolylineSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, Ints.getCPtr(linePtsX), linePtsX,
							Ints.getCPtr(linePtsY), linePtsY, nStartPos,
							nLineLen, nLineColor, offset, snap, fWidth,
							fHeight, radian, nMaskLen, Ints.getCPtr(slMask),
							slMask);
	}

	public void DrawVCFLine_DotEllipse(int x1, int y1, int x2, int y2,
			int nFillColor) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_DotEllipse(swigCPtr,
					this, x1, y1, x2, y2, nFillColor);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_DotEllipseSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x1, y1, x2, y2, nFillColor);
	}

	public void DrawVCFLine_HatchPolyline(Ints linePtsX, Ints linePtsY,
			int nStartPos, int nLineLen, int nLineColor, double offset,
			double snap, double fWidth, double fHeight, double radian,
			int nMaskLen, Ints slMask) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_HatchPolyline(
					swigCPtr, this, Ints.getCPtr(linePtsX), linePtsX,
					Ints.getCPtr(linePtsY), linePtsY, nStartPos, nLineLen,
					nLineColor, offset, snap, fWidth, fHeight, radian,
					nMaskLen, Ints.getCPtr(slMask), slMask);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_HatchPolylineSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, Ints.getCPtr(linePtsX), linePtsX,
							Ints.getCPtr(linePtsY), linePtsY, nStartPos,
							nLineLen, nLineColor, offset, snap, fWidth,
							fHeight, radian, nMaskLen, Ints.getCPtr(slMask),
							slMask);
	}

	public void DrawVCFLine_HatchLine(int x1, int y1, int x2, int y2,
			int nLineStyle, int nLineColor, float nWidth) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_HatchLine(swigCPtr,
					this, x1, y1, x2, y2, nLineStyle, nLineColor, nWidth);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_HatchLineSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x1, y1, x2, y2, nLineStyle,
							nLineColor, nWidth);
	}

	public void DrawVCFLine_TrueTypeSymbol(Ints linePtsX, Ints linePtsY,
			int nStartPos, int nLineLen, double fsnap, double foffset,
			double fWidth, double fHeight, double fSymWidth, double fSymHeight,
			int nMaskLen, int nSymNa, double fSymAngle,
			emVCF_SYMBOL_FONT emFont, double fScale, int nSymColor, Ints slMask) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFLine_TrueTypeSymbol(
					swigCPtr, this, Ints.getCPtr(linePtsX), linePtsX,
					Ints.getCPtr(linePtsY), linePtsY, nStartPos, nLineLen,
					fsnap, foffset, fWidth, fHeight, fSymWidth, fSymHeight,
					nMaskLen, nSymNa, fSymAngle, emFont.swigValue(), fScale,
					nSymColor, Ints.getCPtr(slMask), slMask);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFLine_TrueTypeSymbolSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, Ints.getCPtr(linePtsX), linePtsX,
							Ints.getCPtr(linePtsY), linePtsY, nStartPos,
							nLineLen, fsnap, foffset, fWidth, fHeight,
							fSymWidth, fSymHeight, nMaskLen, nSymNa, fSymAngle,
							emFont.swigValue(), fScale, nSymColor,
							Ints.getCPtr(slMask), slMask);
	}

	public void DrawVCFArea_PolyPolygon(Ints linePtsX, Ints linePtsY,
			Ints nRingLen, int nFillColor, int nFillStyle) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFArea_PolyPolygon(swigCPtr,
					this, Ints.getCPtr(linePtsX), linePtsX,
					Ints.getCPtr(linePtsY), linePtsY, Ints.getCPtr(nRingLen),
					nRingLen, nFillColor, nFillStyle);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFArea_PolyPolygonSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, Ints.getCPtr(linePtsX), linePtsX,
							Ints.getCPtr(linePtsY), linePtsY,
							Ints.getCPtr(nRingLen), nRingLen, nFillColor,
							nFillStyle);
	}

	public void DrawVCFArea_PolyEllipse(Ints linePtsX, Ints linePtsY,
			Ints nRingLen, int nFillColor, float nWidth, float nHeight) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFArea_PolyEllipse(swigCPtr,
					this, Ints.getCPtr(linePtsX), linePtsX,
					Ints.getCPtr(linePtsY), linePtsY, Ints.getCPtr(nRingLen),
					nRingLen, nFillColor, nWidth, nHeight);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFArea_PolyEllipseSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, Ints.getCPtr(linePtsX), linePtsX,
							Ints.getCPtr(linePtsY), linePtsY,
							Ints.getCPtr(nRingLen), nRingLen, nFillColor,
							nWidth, nHeight);
	}

	public void DrawVCFArea_Ellipse(float x1, float y1, float x2, float y2,
			int nFillColor) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI.CHfVCFGeoCanvas_DrawVCFArea_Ellipse(swigCPtr,
					this, x1, y1, x2, y2, nFillColor);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVCFArea_EllipseSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x1, y1, x2, y2, nFillColor);
	}

	public void DrawVoyageMeasure(int x1, int y1, int x2, int y2,
			int nPenColor, int nPenWidth, int nPenStyle, float fDir, float fDis) {
		if (getClass() == CHfVCFGeoCanvas.class)
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVoyageMeasure(swigCPtr, this, x1, y1,
							x2, y2, nPenColor, nPenWidth, nPenStyle, fDir, fDis);
		else
			elecchartcoreJNI
					.CHfVCFGeoCanvas_DrawVoyageMeasureSwigExplicitCHfVCFGeoCanvas(
							swigCPtr, this, x1, y1, x2, y2, nPenColor,
							nPenWidth, nPenStyle, fDir, fDis);
	}

	public void SetXYPixelDPM(double xPixelDPM, double yPixelDPM) {
		elecchartcoreJNI.CHfVCFGeoCanvas_SetXYPixelDPM(swigCPtr, this,
				xPixelDPM, yPixelDPM);
	}

	public void SetViewScreenRect(CRect rcRect) {
		elecchartcoreJNI.CHfVCFGeoCanvas_SetViewScreenRect(swigCPtr, this,
				CRect.getCPtr(rcRect), rcRect);
	}

	public void GetViewScreenRect(CRect rcRect) {
		elecchartcoreJNI.CHfVCFGeoCanvas_GetViewScreenRect(swigCPtr, this,
				CRect.getCPtr(rcRect), rcRect);
	}

	public double GetxPixelDPM() {
		return elecchartcoreJNI.CHfVCFGeoCanvas_GetxPixelDPM(swigCPtr, this);
	}

	public double GetyPixelDPM() {
		return elecchartcoreJNI.CHfVCFGeoCanvas_GetyPixelDPM(swigCPtr, this);
	}

	public void SetScreenDpi(float dpi) {
		elecchartcoreJNI.CHfVCFGeoCanvas_SetScreenDpi(swigCPtr, this, dpi);
	}

	public float GetScreenDpi() {
		return elecchartcoreJNI.CHfVCFGeoCanvas_GetScreenDpi(swigCPtr, this);
	}

	public void SetGeoExtenParams(stCHARTGEOPARAMETER stGeoPrjExtenParam) {
		elecchartcoreJNI.CHfVCFGeoCanvas_SetGeoExtenParams(swigCPtr, this,
				stCHARTGEOPARAMETER.getCPtr(stGeoPrjExtenParam),
				stGeoPrjExtenParam);
	}

	public void SetRotateAngle(double dAangle) {
		elecchartcoreJNI
				.CHfVCFGeoCanvas_SetRotateAngle(swigCPtr, this, dAangle);
	}

	public double GetRotateAngle() {
		return elecchartcoreJNI.CHfVCFGeoCanvas_GetRotateAngle(swigCPtr, this);
	}

	public double GetChartProjScale() {
		return elecchartcoreJNI.CHfVCFGeoCanvas_GetChartProjScale(swigCPtr,
				this);
	}

	public void SetChartDspScaleLevel(double dScaleLevel) {
		elecchartcoreJNI.CHfVCFGeoCanvas_SetChartDspScaleLevel(swigCPtr, this,
				dScaleLevel);
	}

	public double GetChartDspScaleLevel() {
		return elecchartcoreJNI.CHfVCFGeoCanvas_GetChartDspScaleLevel(swigCPtr,
				this);
	}

	public void SetChartDspScale(double fDspScale) {
		elecchartcoreJNI.CHfVCFGeoCanvas_SetChartDspScale(swigCPtr, this,
				fDspScale);
	}

	public double GetChartDspScale() {
		return elecchartcoreJNI
				.CHfVCFGeoCanvas_GetChartDspScale(swigCPtr, this);
	}

	public void DspScaleLevelNormalize(double fInScaleLevel,
			SWIGTYPE_p_double fNorScaleLevel) {
		elecchartcoreJNI.CHfVCFGeoCanvas_DspScaleLevelNormalize(swigCPtr, this,
				fInScaleLevel, SWIGTYPE_p_double.getCPtr(fNorScaleLevel));
	}

	public void SetViewZoneGeoCenter(double dCenLong, double dCenLat) {
		elecchartcoreJNI.CHfVCFGeoCanvas_SetViewZoneGeoCenter(swigCPtr, this,
				dCenLong, dCenLat);
	}

	public void GetViewZoneGeoCenter(SWIGTYPE_p_double dCenLong,
			SWIGTYPE_p_double dCenLat) {
		elecchartcoreJNI.CHfVCFGeoCanvas_GetViewZoneGeoCenter(swigCPtr, this,
				SWIGTYPE_p_double.getCPtr(dCenLong),
				SWIGTYPE_p_double.getCPtr(dCenLat));
	}

	public void CalculatePlaneReferenceOrg() {
		elecchartcoreJNI.CHfVCFGeoCanvas_CalculatePlaneReferenceOrg(swigCPtr,
				this);
	}

	public void PlaneXYToScreenXY(int lPlaneX, int lPlaneY,
			SWIGTYPE_p_long lSrcX, SWIGTYPE_p_long lSrcY) {
		elecchartcoreJNI.CHfVCFGeoCanvas_PlaneXYToScreenXY(swigCPtr, this,
				lPlaneX, lPlaneY, SWIGTYPE_p_long.getCPtr(lSrcX),
				SWIGTYPE_p_long.getCPtr(lSrcY));
	}

	public void ScreenXYToPlaneXY(int lSrcX, int lSrcY,
			SWIGTYPE_p_long lPlaneX, SWIGTYPE_p_long lPlaneY) {
		elecchartcoreJNI.CHfVCFGeoCanvas_ScreenXYToPlaneXY(swigCPtr, this,
				lSrcX, lSrcY, SWIGTYPE_p_long.getCPtr(lPlaneX),
				SWIGTYPE_p_long.getCPtr(lPlaneY));
	}

	public void GeoCoordToScrCoord(double dLong, double dLat,
			SWIGTYPE_p_long lScrX, SWIGTYPE_p_long lScrY) {
		elecchartcoreJNI.CHfVCFGeoCanvas_GeoCoordToScrCoord(swigCPtr, this,
				dLong, dLat, SWIGTYPE_p_long.getCPtr(lScrX),
				SWIGTYPE_p_long.getCPtr(lScrY));
	}

	public void ScrCoordToGeoCoord(int lScrX, int lScrY,
			SWIGTYPE_p_double dLong, SWIGTYPE_p_double dLat) {
		elecchartcoreJNI.CHfVCFGeoCanvas_ScrCoordToGeoCoord(swigCPtr, this,
				lScrX, lScrY, SWIGTYPE_p_double.getCPtr(dLong),
				SWIGTYPE_p_double.getCPtr(dLat));
	}

	public void GeoCoordToPlaneXY(double dLong, double dLat,
			SWIGTYPE_p_long lPlaneX, SWIGTYPE_p_long lPlaneY) {
		elecchartcoreJNI.CHfVCFGeoCanvas_GeoCoordToPlaneXY(swigCPtr, this,
				dLong, dLat, SWIGTYPE_p_long.getCPtr(lPlaneX),
				SWIGTYPE_p_long.getCPtr(lPlaneY));
	}

	public void PlaneXYToGeoCoord(int lPlaneX, int lPlaneY,
			SWIGTYPE_p_double dLong, SWIGTYPE_p_double dLat) {
		elecchartcoreJNI.CHfVCFGeoCanvas_PlaneXYToGeoCoord(swigCPtr, this,
				lPlaneX, lPlaneY, SWIGTYPE_p_double.getCPtr(dLong),
				SWIGTYPE_p_double.getCPtr(dLat));
	}

	public void ScrCoordReverseRotation(int lInX, int lInY,
			SWIGTYPE_p_long lOutX, SWIGTYPE_p_long lOutY) {
		elecchartcoreJNI.CHfVCFGeoCanvas_ScrCoordReverseRotation(swigCPtr,
				this, lInX, lInY, SWIGTYPE_p_long.getCPtr(lOutX),
				SWIGTYPE_p_long.getCPtr(lOutY));
	}

	public void ScrCoordObverseRotation(int lInX, int lInY,
			SWIGTYPE_p_long lOutX, SWIGTYPE_p_long lOutY) {
		elecchartcoreJNI.CHfVCFGeoCanvas_ScrCoordObverseRotation(swigCPtr,
				this, lInX, lInY, SWIGTYPE_p_long.getCPtr(lOutX),
				SWIGTYPE_p_long.getCPtr(lOutY));
	}

	public void GetViewScreenGeoZone(stGEOENVELOPE stGeoZone) {
		elecchartcoreJNI.CHfVCFGeoCanvas_GetViewScreenGeoZone(swigCPtr, this,
				stGEOENVELOPE.getCPtr(stGeoZone), stGeoZone);
	}

	public void pickChartMessage(int nPickType) {
		elecchartcoreJNI.CHfVCFGeoCanvas_pickChartMessage__SWIG_0(swigCPtr,
				this, nPickType);
	}

	public void pickChartMessage() {
		elecchartcoreJNI.CHfVCFGeoCanvas_pickChartMessage__SWIG_1(swigCPtr,
				this);
	}

	public void ZoomOut(CPoint mpoint) {
		elecchartcoreJNI.CHfVCFGeoCanvas_ZoomOut(swigCPtr, this,
				CPoint.getCPtr(mpoint), mpoint);
	}

	public void ZoomMin(CPoint mpoint) {
		elecchartcoreJNI.CHfVCFGeoCanvas_ZoomMin(swigCPtr, this,
				CPoint.getCPtr(mpoint), mpoint);
	}

	public void CentPan(CPoint mpoint) {
		elecchartcoreJNI.CHfVCFGeoCanvas_CentPan(swigCPtr, this,
				CPoint.getCPtr(mpoint), mpoint);
	}

	public void MovePan(CPoint mpoint1, CPoint mpoint2) {
		elecchartcoreJNI.CHfVCFGeoCanvas_MovePan(swigCPtr, this,
				CPoint.getCPtr(mpoint1), mpoint1, CPoint.getCPtr(mpoint2),
				mpoint2);
	}

	public boolean ptPointInViewRect(CPoint mpoint) {
		return elecchartcoreJNI.CHfVCFGeoCanvas_ptPointInViewRect(swigCPtr,
				this, CPoint.getCPtr(mpoint), mpoint);
	}

	public boolean ptPointInResetRect(CPoint mpoint) {
		return elecchartcoreJNI.CHfVCFGeoCanvas_ptPointInResetRect__SWIG_0(
				swigCPtr, this, CPoint.getCPtr(mpoint), mpoint);
	}

	public boolean OpenWinZoomOut(CPoint ptFirst, CPoint ptSecond) {
		return elecchartcoreJNI.CHfVCFGeoCanvas_OpenWinZoomOut(swigCPtr, this,
				CPoint.getCPtr(ptFirst), ptFirst, CPoint.getCPtr(ptSecond),
				ptSecond);
	}

	public boolean ptPointInResetRect(CPoint mpoint, int nShipL, double fCourse) {
		return elecchartcoreJNI
				.CHfVCFGeoCanvas_ptPointInResetRect__SWIG_1(swigCPtr, this,
						CPoint.getCPtr(mpoint), mpoint, nShipL, fCourse);
	}

	public double GetMaxScaleLevel() {
		return elecchartcoreJNI
				.CHfVCFGeoCanvas_GetMaxScaleLevel(swigCPtr, this);
	}

	public double GetMinScaleLevel() {
		return elecchartcoreJNI
				.CHfVCFGeoCanvas_GetMinScaleLevel(swigCPtr, this);
	}

	public double GetMaxScale() {
		return elecchartcoreJNI.CHfVCFGeoCanvas_GetMaxScale(swigCPtr, this);
	}

	public double GetMinScale() {
		return elecchartcoreJNI.CHfVCFGeoCanvas_GetMinScale(swigCPtr, this);
	}

	public void SetMaxScale(double fMaxScale) {
		elecchartcoreJNI.CHfVCFGeoCanvas_SetMaxScale(swigCPtr, this, fMaxScale);
	}

	public void SetMinScale(double fMinScale) {
		elecchartcoreJNI.CHfVCFGeoCanvas_SetMinScale(swigCPtr, this, fMinScale);
	}

	public void GetUsableScaleGather(CxhfLongerSet lScaleSet) {
		elecchartcoreJNI.CHfVCFGeoCanvas_GetUsableScaleGather(swigCPtr, this,
				CxhfLongerSet.getCPtr(lScaleSet), lScaleSet);
	}

	public void FingerPinchZoomin(CPoint point, double fScaleFactor) {
		elecchartcoreJNI.CHfVCFGeoCanvas_FingerPinchZoomin(swigCPtr, this,
				CPoint.getCPtr(point), point, fScaleFactor);
	}

	public void FingerPinchZoomout(CPoint point, double fScaleFactor) {
		elecchartcoreJNI.CHfVCFGeoCanvas_FingerPinchZoomout(swigCPtr, this,
				CPoint.getCPtr(point), point, fScaleFactor);
	}

	public void CalculateLongLatByDisDir(double dLong0, double dLat0,
			double dDis, double dDir, SWIGTYPE_p_double dLong,
			SWIGTYPE_p_double dLat) {
		elecchartcoreJNI.CHfVCFGeoCanvas_CalculateLongLatByDisDir(swigCPtr,
				this, dLong0, dLat0, dDis, dDir,
				SWIGTYPE_p_double.getCPtr(dLong),
				SWIGTYPE_p_double.getCPtr(dLat));
	}

}
